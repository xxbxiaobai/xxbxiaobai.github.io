{"meta":{"title":"Manchi","subtitle":"","description":"","author":"Manchi","url":"https://corn0124.cn","root":"/"},"pages":[],"posts":[{"title":"vue各种组件","slug":"vue各种组件","date":"2021-11-30T01:15:13.000Z","updated":"2021-11-30T01:52:52.365Z","comments":true,"path":"2021/11/30/vue各种组件/","link":"","permalink":"https://corn0124.cn/2021/11/30/vue%E5%90%84%E7%A7%8D%E7%BB%84%E4%BB%B6/","excerpt":"","text":"vue作为当下前端主流开发框架之一，也是前端初学者必备的一个技能点，此处省略好多好多废话，我们直接上重点，点进去就知道了，包你满意。 通讯录组件该组件可以实现按姓名首字母定位，点击联系人拨打电话等功能，效果如下 Mail.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126&lt;template&gt; &lt;view id=&quot;list&quot;&gt; &lt;ul class=&quot;list_user&quot; ref=&quot;listUser&quot;&gt; &lt;li v-for=&quot;(item, index) in userData&quot; :key=&quot;index&quot;&gt; &lt;p&gt;&#123;&#123; item.index &#125;&#125;&lt;/p&gt; &lt;ul&gt; &lt;li v-for=&quot;(item, index) in item.user&quot; :key=&quot;index&quot; @click.stop=&quot;addName(item.name)&quot;&gt; &#123;&#123; item.name &#125;&#125; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=&quot;list_index&quot; ref=&quot;Po&quot; &gt; &lt;li v-for=&quot;(item, index) in userIndex&quot; :key=&quot;index&quot; @click=&quot;setScroll(item)&quot; &gt;&#123;&#123;item&#125;&#125;&lt;/li&gt; &lt;/ul&gt; &lt;/view&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;Mail&quot;, data() &#123; return &#123;&#125;; &#125;, props: &#123; userData: &#123; type: Array, default: function () &#123; return []; &#125;, &#125;, &#125;, //计算属性 computed: &#123; userIndex: function () &#123; return this.filterIndex(this.userData); console.log(this.filterIndex()); &#125;, &#125;, //右侧导航数据的调取 methods: &#123; filterIndex(data) &#123; var result = []; for (var i = 0; i &lt; data.length; i++) &#123; if (data[i].index) &#123; result.push(data[i].index); &#125; &#125; return result; &#125;, //右侧导航的距离位置 diweiPo() &#123; var dw = this.$refs.Po.offsetHeight; this.$refs.Po.style.marginTop = -dw / 2 + &quot;px&quot;; &#125;, //设置点击位置的值 setScroll(ev) &#123; // alert(ev) // console.log(ev) var setzhi = this.$refs.listUser.getElementsByTagName(&quot;p&quot;); for (var i = 0; i &lt; setzhi.length; i++) &#123; if (setzhi[i].innerHTML == ev) &#123; document.body.scrollTop = setzhi[i].offsetTop;//移动端获取滚动条的位置 // document.documentElement.scrollTop = setzhi[i].offsetTop;//pc端获取滚动条的位置 &#125; &#125; &#125;, //点击姓名 addName(e)&#123; uni.navigateTo(&#123; url:&quot;/pages/volunteer/newTask/newTask?name=&quot;+e &#125;) console.log(e) &#125; &#125;, mounted() &#123; this.diweiPo(); // console.log(11111111) &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;* &#123; padding: 0; margin: 0;&#125;li &#123; list-style-type: none;&#125;#list &#123; position: relative; top: 100rpx;&#125;#list .list_user p,#list .list_user ul &#123; padding: 0 20rpx;&#125;#list .list_user p &#123; height: 40rpx; background: #F6F7FA; line-height: 40rpx; font-size: 24rpx;&#125;#list .list_user ul li &#123; height: 80rpx; height: 80rpx; line-height: 80rpx; border-bottom:2rpx solid #E5E5E5 ; font-size: 28rpx;&#125;#list .list_index &#123; position: fixed; top: 50%; right: 40rpx; z-index: 999;&#125;#list .list_index li&#123; height: 40rpx;&#125;&lt;/style&gt; index.vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143&lt;template&gt; &lt;view&gt; &lt;view class=&quot;top&quot;&gt; &lt;view class=&quot;search&quot;&gt; &lt;image src=&quot;../../../static/image/search.png&quot; mode=&quot;&quot;&gt;&lt;/image&gt; &lt;input type=&quot;text&quot; placeholder=&quot;搜索&quot;&gt; &lt;text @click=&quot;click()&quot;&gt;搜索&lt;/text&gt; &lt;/view&gt; &lt;/view&gt; &lt;Mail :userData=&#x27;userData&#x27;&gt;&lt;/Mail&gt; &lt;/view&gt;&lt;/template&gt;&lt;script&gt;// import Tabar from &quot;@/components/gobalComponents/Tabar&quot;;import Mail from &quot;@/components/gobalComponents/Mail&quot;;export default &#123; // name: &quot;SearchTask&quot;, components: &#123; // Tabar, Mail &#125;, data() &#123; return &#123; title: &quot;通讯录&quot;, userData:[ &#123; &#x27;index&#x27;:&#x27;A&#x27;, &#x27;user&#x27;:[ &#123;&#x27;name&#x27;:&#x27;a1&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;a2&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;a3&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, ] &#125;, &#123; &#x27;index&#x27;:&#x27;B&#x27;, &#x27;user&#x27;:[ &#123;&#x27;name&#x27;:&#x27;b1&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;b2&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;b3&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, ] &#125;, &#123; &#x27;index&#x27;:&#x27;C&#x27;, &#x27;user&#x27;:[ &#123;&#x27;name&#x27;:&#x27;c1&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;c2&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;c3&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, ] &#125;, &#123; &#x27;index&#x27;:&#x27;D&#x27;, &#x27;user&#x27;:[ &#123;&#x27;name&#x27;:&#x27;d1&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;d2&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;d3&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, ] &#125;, &#123; &#x27;index&#x27;:&#x27;E&#x27;, &#x27;user&#x27;:[ &#123;&#x27;name&#x27;:&#x27;e1&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;e2&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;e3&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, ] &#125;, &#123; &#x27;index&#x27;:&#x27;F&#x27;, &#x27;user&#x27;:[ &#123;&#x27;name&#x27;:&#x27;f1&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;f2&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, &#123;&#x27;name&#x27;:&#x27;f3&#x27;,&#x27;tel&#x27;:&#x27;123456789&#x27;&#125;, ] &#125;, ] &#125;; &#125;, methods: &#123; click()&#123; alert(111) &#125; &#125;, created()&#123; // alert(222) // ZWJSBridge.setTitle(&#123; title: &#x27;通讯录&#x27;&#125;) .then((result) =&gt; &#123; console.log(result); &#125;).catch((error) =&gt; &#123; console.log(error); &#125;); &#125;&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.top&#123; position: fixed; left: 0; right: 0; height: 100rpx; background: #fff; z-index: 99999999; box-shadow: 0rpx 0rpx 14rpx 0rpx rgba(51, 51, 51, 0.13);&#125; .search&#123; width: 672rpx; height: 52rpx; margin: 24rpx auto; // margin-top: 24rpx; background: #F6F7FA; border-radius: 26rpx; image&#123; display: inline-block; vertical-align: middle; width: 26rpx; height: 26rpx; margin-left: 15rpx; &#125; input&#123; display: inline-block; width: 400rpx; height: 48rpx; border: none; font-size: 24rpx; color: #999; margin-left: 20rpx; background: #F6F7FA; vertical-align: middle; line-height: 48rpx; &#125; text&#123; // display: inline-block; width: 104rpx; height: 52rpx; background: #FFB243; border-radius: 22rpx; font-size: 24rpx; font-family: PingFang SC; font-weight: 500; color: #FFFFFF; text-align: center; line-height: 52rpx; vertical-align: top; float: right; &#125; &#125;&lt;/style&gt;","categories":[],"tags":[]},{"title":"白嫖,还得是你","slug":"白嫖-还得是你","date":"2021-11-28T07:23:34.000Z","updated":"2021-11-29T06:54:20.403Z","comments":true,"path":"2021/11/28/白嫖-还得是你/","link":"","permalink":"https://corn0124.cn/2021/11/28/%E7%99%BD%E5%AB%96-%E8%BF%98%E5%BE%97%E6%98%AF%E4%BD%A0/","excerpt":"","text":"作为一名初级前端(bug)开发攻城狮,有什么是比白嫖更快乐的呢?除了饺子…不知道为什么最近总对饺子蛮感兴趣的…..曹贼,我给你们准备了一些开发过程中比较常见的js函数块,碰见了直接嫖就行了。 函数的节流与防抖节流1234567891011121314151617181920212223242526/** * 函数节流 规定时间内多次触发只执行一次 */function throttle(fn,delay)&#123; var lastTime; var timer; var delay = delay || 200; return function() &#123; var args = arguments; // 记录当前函数触发的时间 var nowTime = Date.now(); if (lastTime &amp;&amp; nowTime - lastTime &lt; delay) &#123; clearTimeout(timer); timer = setTimeout(function () &#123; // 记录上一次函数触发的时间 lastTime = nowTime; // 修正this指向问题 fn.apply(this, args); &#125;, delay); &#125;else&#123; lastTime = nowTime; fn.apply(this, args); &#125; &#125;&#125; 防抖1234567891011121314151617/** * 函数防抖 规定时间内结束后在触发，若在此时间内多次触发则重新计时 */function debounce(fn, delay) &#123; // 记录上一次的延时器 var timer = null; var delay = delay || 200; return function() &#123; var args = arguments; var that = this; // 清除上一次延时器 clearTimeout(timer) timer = setTimeout(function() &#123; fn.apply(that,args) &#125;, delay); &#125;&#125; 脱敏函数-用户隐私保护姓名脱敏12345678910111213function nameProtect(str) &#123; if (null != str &amp;&amp; str != undefined) &#123; if (str.length &lt;= 3) &#123; return &quot;*&quot; + str.substring(1, str.length); &#125; else if (str.length &gt; 3 &amp;&amp; str.length &lt;= 6) &#123; return &quot;**&quot; + str.substring(2, str.length); &#125; else if (str.length &gt; 6) &#123; return str.substring(0, 2) + &quot;****&quot; + str.substring(6, str.length); &#125; &#125; else &#123; return &quot;&quot;; &#125; &#125; 身份证脱敏123456function idCardProtect(value, row, index) &#123; var len = value.length; var xx = value.substring(1, len - 1); var values = value.replace(xx, &quot;****************&quot;); return values; &#125; 手机号脱敏123456function mobileProtect(value, row, index) &#123; var len = value.length; var xx = value.substring(3, len - 4); var values = value.replace(xx, &quot;****&quot;); return values; &#125; 时间篇根据秒数算展示时间1234567891011function setNumer(times) &#123; var h = Math.floor(times/3600); var m = Math.floor(times%3600/60); var s = Math.floor(times%60); //转换格式 h = h&gt;9?h:&quot;0&quot;+h; m = m&gt;9?m:&quot;0&quot;+m; s = s&gt;9?s:&quot;0&quot;+s; //在页面上显示 return &#123;h:h,m:m,s:s&#125;;&#125; 根据两个时间差毫秒数计算相差几天1234567891011121314151617181920212223242526function diffTime(times) &#123; //根据两个时间差毫秒数计算相差几天 var timediff = times; // var weeks = Math.floor(timediff / (1000 * 60 * 60 * 24 * 7)); // timediff -= weeks * (1000 * 60 * 60 * 24 * 7); var days = Math.floor(timediff / (1000 * 60 * 60 * 24)); timediff -= days * (1000 * 60 * 60 * 24); var hours = Math.floor(timediff / (1000 * 60 * 60)); timediff -= hours * (1000 * 60 * 60); var mins = Math.floor(timediff / (1000 * 60)); timediff -= mins * (1000 * 60); var secs = Math.floor(timediff / 1000); timediff -= secs * 1000; // console.log(days + &quot; 天, &quot; + hours + &quot; 小时, &quot; + mins + &quot; 分&quot;+secs+&quot;秒&quot;); var time_diff = &#123; // weeks : weeks, days: days, hours: hours, mins: mins, secs: secs &#125; return time_diff;&#125; 获得当前时间123456789101112131415function getNowTime(type)&#123; var date = new Date(); var year = date.getFullYear(); var month= date.getMonth()+1; var day = date.getDate(); month = month&gt;9?month:&quot;0&quot;+month; day = day&gt;9?day:&quot;0&quot;+day; var str; if(type==1)&#123; str = year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日&quot; &#125;else&#123; str = year+&quot;-&quot;+month+&quot;-&quot;+day &#125; return str&#125; 获得当前时间123456789101112131415function getNowTime(type)&#123; var date = new Date(); var year = date.getFullYear(); var month= date.getMonth()+1; var day = date.getDate(); month = month&gt;9?month:&quot;0&quot;+month; day = day&gt;9?day:&quot;0&quot;+day; var str; if(type==1)&#123; str = year+&quot;年&quot;+month+&quot;月&quot;+day+&quot;日&quot; &#125;else&#123; str = year+&quot;-&quot;+month+&quot;-&quot;+day &#125; return str&#125; 数组篇普通数组去重12345678910function arryClear(arr)&#123; var tmp = new Array(); for(var i in arr)&#123; if(tmp.indexOf(arr[i])==-1)&#123; tmp.push(arr[i]); &#125; &#125; return tmp;&#125; 数组对象去重复参数说明:arry数组,Object根据的对象名 1234567891011function arryClearObj(arry,Object)&#123; var result = []; var obj = &#123;&#125;; for(var j=0;j&lt;arry.length;j++)&#123; if(!obj[arry[j][Object]])&#123; result.push(arry[j]); obj[arry[j][Object]] = true; &#125; &#125; return result;&#125; 表单验证验证手机号码1234567891011function checkPhone(num)&#123; const zz = /^1[3456789]\\d&#123;9&#125;$/; if(!zz.test(num))&#123; uni.showToast(&#123; title : &quot;请输入正确的手机号码&quot;, icon : &quot;none&quot; &#125;); return false &#125; return true;&#125; 邮箱验证1234567891011function checkEmail(num)&#123; const zz = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/; if(!zz.test(num))&#123; uni.showToast(&#123; title : &quot;邮箱格式不正确&quot;, icon : &quot;none&quot; &#125;); return false &#125; return true;&#125; 内存字节转换1234567891011121314151617181920function conver(limit)&#123; var size = &quot;&quot;; if( limit &lt; 0.1 * 1024 )&#123; //如果小于0.1KB转化成B size = limit.toFixed(2) + &quot;B&quot;; &#125;else if(limit &lt; 0.1 * 1024 * 1024 )&#123;//如果小于0.1MB转化成KB size = (limit / 1024).toFixed(2) + &quot;KB&quot;; &#125;else if(limit &lt; 0.1 * 1024 * 1024 * 1024 * 1024)&#123; //如果小于0.1GB转化成MB // size = (limit / (1024 * 1024)).toFixed(2) + &quot;MB&quot;; size = (limit / (1024 * 1024)).toFixed(2); &#125;else&#123; //其他转化成GB size = (limit / (1024 * 1024 * 1024)).toFixed(2) + &quot;GB&quot;; &#125; var sizestr = size + &quot;&quot;; var len = sizestr.indexOf(&quot;\\.&quot;); var dec = sizestr.substr(len + 1, 2); if(dec == &quot;00&quot;)&#123;//当小数点后为00时 去掉小数部分 return sizestr.substring(0,len) + sizestr.substr(len + 3,2); &#125; return sizestr; &#125; 随机生成字符串好奇这种需求是怎么来的,讲道理哦,不应该是后端小伙伴做的吗,像这种涉及到随机字符串生成的东西… 123456789var str = [&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;,&#x27;7&#x27;,&#x27;8&#x27;,&#x27;9&#x27;,&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;,&#x27;D&#x27;,&#x27;E&#x27;,&#x27;F&#x27;,&#x27;G&#x27;,&#x27;H&#x27;,&#x27;I&#x27;,&#x27;J&#x27;,&#x27;K&#x27;,&#x27;L&#x27;,&#x27;M&#x27;,&#x27;N&#x27;,&#x27;O&#x27;,&#x27;P&#x27;,&#x27;Q&#x27;,&#x27;R&#x27;,&#x27;S&#x27;,&#x27;T&#x27;,&#x27;U&#x27;,&#x27;V&#x27;,&#x27;W&#x27;,&#x27;X&#x27;,&#x27;Y&#x27;,&#x27;Z&#x27;];function generateMixed(n) &#123; var res = &quot;&quot;; for(var i = 0; i &lt; n ; i ++) &#123; var id = Math.ceil(Math.random()*35); res += str[id]; &#125; return res;&#125;","categories":[],"tags":[]},{"title":"前端碎片化","slug":"碎片化知识点","date":"2021-11-23T05:51:35.000Z","updated":"2021-11-29T06:19:56.435Z","comments":true,"path":"2021/11/23/碎片化知识点/","link":"","permalink":"https://corn0124.cn/2021/11/23/%E7%A2%8E%E7%89%87%E5%8C%96%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"","text":"受前端老学姐的影响,很早就想写写东西记录下日常的bug,但始终没有迈开那关键的一步,这个是她的 博客，感兴趣的小伙伴可以收藏一下,话不多说,下面就是我在日常工作中整理了一下基本(沙比)需求的解决办法。 微信小程序系列小程序打开pdf文件并重命名小程序开发中甲方需要插入一份pdf文件,正常的流程是将源文件通过上传文件接口上传至服务器后，前端拿到其返回的url链接,通过微信Api打开下载这个链接即可,可是问题来了,正常打开后该文件的文件名为32位字符串？这显然不符合甲方霸霸那独特且刁钻的口味,没办法,改呗,视图如下: 1234567891011121314151617181920212223242526wx.downloadFile(&#123;//亲测有效,非常银杏化 url: &#x27;https://oss-cn-hangzhou-zwynet-d01-a.internet.cloud.zj.gov.cn/zjty-oss/zjsport_filehost/2021-10-18/2a32dd2778a44e32abf8ad9d5b9186f4-file.pdf&#x27;, //接口pdf路径 success(val) &#123; const Path = val.tempFilePath; const fs = wx.getFileSystemManager(); fs.saveFile(&#123; tempFilePath: Path, //Path我这里是wx.downloadFile()下载下来的文件临时地址 //wx.env.USER_DATA_PATH这个是微信文件的路径 没试过别的 别的路径一般没有权限 filePath: wx.env.USER_DATA_PATH + &#x27;/&#x27; + &#x27;浙体产业宣传册&#x27; + &#x27;.pdf&#x27;, success: function(res) &#123; wx.openDocument(&#123; filePath: res.savedFilePath, showMenu: true, //分享的按钮 fileType: &#x27;pdf&#x27;, success: function(res) &#123; //现在再分享给别人的话 就有后缀了 console.log(&#x27;打开成功&#x27;); &#125; &#125;) &#125;, fail: function(res) &#123; console.log(res) &#125; &#125;) &#125; &#125;) 微信分享app12345678910111213141516171819202122232425262728293031323334353637383940414243444546const httpUrl = &quot;https://www.zjlanghun.com/logo.png&quot;; //分享缩略图function goShare(obj)&#123; console.log(&quot;obj: &quot; + JSON.stringify(obj)); uni.showActionSheet(&#123; itemList: [&#x27;微信好友&#x27;, &#x27;分享到朋友圈&#x27;], success: function (res) &#123; if(res.tapIndex==0)&#123; //微信好友 uni.share(&#123; provider: &quot;weixin&quot;, scene: &quot;WXSceneSession&quot;, type: 0, href: obj.href, title: obj.title, summary: obj.intro, imageUrl: httpUrl, success: function (res) &#123; // console.log(&quot;success:&quot; + JSON.stringify(res)); &#125;, fail: function (err) &#123; // console.log(&quot;fail:&quot; + JSON.stringify(err)); &#125; &#125;); &#125;else&#123; //分享到朋友圈 uni.share(&#123; provider: &quot;weixin&quot;, scene: &quot;WXSenceTimeline&quot;, type: 0, href: obj.href, title: obj.title, summary: obj.intro, imageUrl: httpUrl, success: function (res) &#123; // console.log(&quot;success:&quot; + JSON.stringify(res)); &#125;, fail: function (err) &#123; // console.log(&quot;fail:&quot; + JSON.stringify(err)); &#125; &#125;); &#125; &#125;, fail: function (res) &#123; // console.log(res.errMsg); &#125; &#125;);&#125; 移动端-浙里办应用开发引入高德地图JSapi并实现周边搜索功能由于是在浙里办App里面开发,所以我用的浙里办定位的api,喜欢的话可以也可使用高德自身的定位,懒得放图了,直接上代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;template&gt; &lt;view&gt; &lt;view class=&quot;map&quot; id=&quot;map&quot;&gt;&lt;/view&gt; &lt;view id=&quot;panel&quot;&gt;&lt;/view&gt; &lt;/view&gt;&lt;/template&gt;&lt;script&gt; export default &#123; data() &#123; return &#123; latitude: &#x27;30.1891224305294&#x27;, longitude: &#x27;120.16918230789308&#x27;, type:&#x27;&#x27; &#125; &#125;, onLoad(option) &#123; console.log(option.type) this.type = option.type //上个页面传过来的搜索类型 例如&#x27;酒店&#x27; this.getMyLocation() &#125;, mounted() &#123; var that = this var marker, map = new AMap.Map(&quot;map&quot;, &#123; resizeEnable: true, zoom: 15, center: [that.longitude, that.latitude] &#125;); marker = new AMap.Marker(&#123; icon: &quot;//a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-default.png&quot;, position: [this.longitude, this.latitude], offset: new AMap.Pixel(-13, -30) &#125;); marker.setMap(map); AMap.service([&quot;AMap.PlaceSearch&quot;], function() &#123; //构造地点查询类 var placeSearch = new AMap.PlaceSearch(&#123; // type: &#x27;住宿&#x27;, // 兴趣点类别 pageSize: 3, // 单页显示结果条数 pageIndex: 1, // 页码 map: map, panel: &quot;panel&quot;, // 结果列表将在此容器中进行展示。 autoFitView: true // 是否自动调整地图视野使绘制的 Marker点都处于视口的可见范围 &#125;); placeSearch.searchNearBy(that.type, [that.longitude, that.latitude], 1000, function(status, result) &#123; console.log(status, result) &#125;); &#125;); &#125;, methods: &#123; //获取当前位置信息 getMyLocation() &#123; ZWJSBridge.getLocation().then((result) =&gt; &#123; console.log(result.latitude); this.latitude = result.latitude this.longitude = result.longitude &#125;).catch((error) =&gt; &#123; console.log(error); &#125;); &#125; &#125; &#125;&lt;/script&gt;&lt;style scoped lang=&quot;scss&quot;&gt; .map &#123; width: 100%; height: 100vh; &#125; #panel &#123; position: fixed; background-color: white; max-height: 90%; overflow-y: auto; bottom: 10rpx; width: 100%; &#125; /deep/.amap-icon img &#123; width: 50rpx; height: 60rpx; &#125;&lt;/style&gt; ps:记得引入高德的JsApi,高德demo演示 原生uniapp项目变成vue-cli工程,并指定build打包路径浙里办新平台项目单应用的部署发布需要vue-cli工程的项目,原因是新平台下发布项目会默认依次执行 npm i,npm run serve,npm run build,并且打包后的文件夹只能叫build,并且执行build文件夹下面根目录的index.html文件,下面将展示如何将uni项目套个vue-cli的壳并且修改默认的打包路径,如下:一、全局安装vue-cli 1npm install -g @vue/cli 二、创建一个空的uni-app工程,模板选择默认模板就好了 1vue create -p dcloudio/uni-preset-vue demo 三、安装sass 1234npm install node-sass@4.14.1 --savenpm install sass-loader@8.0.0 --save// 注：node-sass和sass-loader安装需要制定版本，版本太高会不兼容，指定版本如安装不成功自行百度解决办法 四、偷梁换柱 1将新项目中的src下面的文件全部删掉,将原来uni项目全部拷贝到src下面 五、将uni的less文件全部改成scss,包括vue页面lang=’less’替换为lang=’scss’六、修改build路径,根目录下package.json文件build-h5配置 123&quot;build:h5&quot;: &quot;cross-env NODE_ENV=production UNI_PLATFORM=h5 vue-cli-service uni-build&quot;替换为&quot;build:h5&quot;: &quot;cross-env NODE_ENV=production UNI_PLATFORM=h5 UNI_OUTPUT_DIR=build vue-cli-service uni-build&quot; 浙里办单应用二次回退问题解决当我们项目中存在获取用户信息的操作时,必然会用到浙里办的单点登录,就是用一个空白的首页里面存放单点登录的跳转链接,判断用户是否登录/实名认证,若已登录/实名认证,则重定向到我们项目初始着陆页面,按照这个思想逻辑来实现单点登录的话,难免会遇到用户端二次回退的问题(在项目着陆页面触发移动端的返回事件后会返回到我们的单点登录的空白页面,也有可能存在回退死循环,根本无法通过默认的回退事件回退到上一个页面),解决的办法也很简单,可以考虑在项目着陆页面加个浙里办的Api——关闭当前应用,如下: ZWJSBridge.close().then((result) =&gt; &#123; console.log(result); &#125;).catch((error) =&gt; &#123; console.log(error); &#125;); ps:此处需要监听移动端的默认返回事件,用这个api替换掉就行了 1234567891011121314methods:&#123; goBack()&#123; ZWJSBridge.close().then((result) =&gt; &#123; console.log(result); &#125;).catch((error) =&gt; &#123; console.log(error); &#125;); &#125;&#125;,mounted()&#123; if (window.history &amp;&amp; window.history.pushState) &#123; // 向历史记录中插入了当前页 history.pushState(null, null, document.URL); window.addEventListener(&#x27;popstate&#x27;, this.goBack, false);&#125;&#125;,destroyed()&#123; window.removeEventListener(&#x27;popstate&#x27;, this.goBack, false); &#125;,","categories":[],"tags":[]}],"categories":[],"tags":[]}